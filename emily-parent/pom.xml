<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<artifactId>emily-parent</artifactId>
	<packaging>pom</packaging>
	<name>emily-parent</name>
	<description>Parent module provides the dependencies plugins and profile managements</description>

	<parent>
		<groupId>com.alice.emily</groupId>
		<artifactId>emily-bom</artifactId>
		<version>1.0-SNAPSHOT</version>
		<relativePath>../emily-bom</relativePath> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<!-- Project settings -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<maven.build.timestamp.format>yyyy-MM-dd</maven.build.timestamp.format>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
		</dependency>
		<dependency>
			<groupId>org.jodd</groupId>
			<artifactId>jodd-bean</artifactId>
		</dependency>
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-log4j2</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<extensions>
			<extension>
				<groupId>kr.motd.maven</groupId>
				<artifactId>os-maven-plugin</artifactId>
				<version>1.4.1.Final</version>
			</extension>
		</extensions>
		<plugins>
			<!-- Javac Compiler -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<compilerArgument>-parameters</compilerArgument>
					<testCompilerArgument>-parameters</testCompilerArgument>
					<source>${maven.compiler.source}</source>
					<target>${maven.compiler.target}</target>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>

			<!-- Jar with emily build manifest entries -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<archive>
						<manifestEntries>
							<Implementation-Build>${maven.build.timestamp}</Implementation-Build>
							<Implementation-Title>${project.artifactId}</Implementation-Title>
							<Implementation-Version>${project.version}</Implementation-Version>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<executions>
					<execution>
						<id>attach-sources</id>
						<goals>
							<goal>jar-no-fork</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<attach>true</attach>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>${maven.checkstyle.plugin.version}</version>
				<configuration>
					<configLocation>checkstyle/default-checks.xml</configLocation>
					<headerLocation>checkstyle/asf-header.txt</headerLocation>
					<consoleOutput>true</consoleOutput>
					<sourceDirectories>
						<sourceDirectory>${project.build.sourceDirectory}</sourceDirectory>
						<sourceDirectory>${project.build.testSourceDirectory}</sourceDirectory>
					</sourceDirectories>
				</configuration>
				<executions>
					<execution>
						<id>verify-style</id>
						<phase>verify</phase>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>com.puppycrawl.tools</groupId>
						<artifactId>checkstyle</artifactId>
						<version>${checkstyle.version}</version>
					</dependency>
					<dependency>
						<groupId>com.alice.emily</groupId>
						<artifactId>emily-assets</artifactId>
						<version>${emily.version}</version>
					</dependency>
				</dependencies>
			</plugin>

			<!--
                maven version manage  http://mojo.codehaus.org/versions-maven-plugin/

                很多Maven用户遇到过这样一个问题，当项目包含大量模块的时候，为他们集体更新版本就变成一件烦人的事情，到底有没有自动化工具能帮助
                完成这件 事情呢？（当然你可以使用sed之类的文本操作工具，不过不在本文讨论范围）答案是肯定的，versions-maven-plugin提供了
                很多目标帮助你管理Maven项目的各种版本信息。例如最常用的，命令 mvn versions:set -D newVersion=1.1-SNAPSHOT 就能帮助你
                把所有模块的版本更新到1.1-SNAPSHOT。该插件还提供了其他一些很有用的目标，display-dependency-updates能告诉你项目依赖有
                哪些可用的更新；类似的display-plugin-updates能告诉你可用的插件更新；然后use-latest-versions能自动帮你将所有依赖升级
                到最新版本。最后，如果你对所做的更改满意，则可以使用 mvn versions:commit 提交，不满意的话也可以使用 mvn versions:revert
                进行撤销。
             -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>versions-maven-plugin</artifactId>
			</plugin>

			<!--
                http://maven.apache.org/plugins/maven-help-plugin/

                maven-help-plugin是一个小巧的辅助工具，最简单的help:system可以打印所有可用的环境变量和Java系统属性。
                help:effective-pom和help:effective-settings最 为有用，它们分别打印项目的有效POM和有效settings，有效POM是指合并了
                所有父POM（包括Super POM）后的XML，当你不确定POM的某些信息从何而来时，就可以查看有效POM。有效settings同理，特别是当你发
                现自己配置的 settings.xml没有生效时，就可以用help:effective-settings来验证。此外，maven-help-plugin的describe目
                标可以帮助你描述任何一个Maven插件的信息，还有all-profiles目标和active-profiles目标帮助查看项目的Profile。
            -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-help-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<executions>
					<execution>
						<id>enforce-versions</id>
						<goals>
							<goal>enforce</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<rules>
						<requireMavenVersion>
							<message>You are running an older version of Maven. Emily requires at least Maven 3.3.9</message>
							<version>[3.3.9,)</version>
						</requireMavenVersion>
						<requireJavaVersion>
							<message>You are running an older version of Java. Emily requires at least JDK ${java.version}</message>
							<version>[${java.version}.0,)</version>
						</requireJavaVersion>
					</rules>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.basepom.maven</groupId>
				<artifactId>duplicate-finder-maven-plugin</artifactId>
				<configuration>
					<failBuildInCaseOfConflict>true</failBuildInCaseOfConflict>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>gRPC</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<file>
					<exists>${basedir}/src/main/resources/protos</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.xolstice.maven.plugins</groupId>
						<artifactId>protobuf-maven-plugin</artifactId>
						<configuration>
							<!--
                              The version of protoc must match protobuf-java. If you don't depend on
                              protobuf-java directly, you will be transitively depending on the
                              protobuf-java version that grpc depends on.
                            -->
							<protocArtifact>
								com.google.protobuf:protoc:${protobuf.version}:exe:${os.detected.classifier}
							</protocArtifact>
							<pluginId>grpc-java</pluginId>
							<pluginArtifact>io.grpc:protoc-gen-grpc-java:${grpc.version}:exe:${os.detected.classifier}
							</pluginArtifact>
							<protoSourceRoot>${project.basedir}/src/main/resources/protos</protoSourceRoot>
							<outputDirectory>${project.basedir}/target/generated-sources/java</outputDirectory>
							<clearOutputDirectory>false</clearOutputDirectory>
						</configuration>
						<executions>
							<execution>
								<goals>
									<goal>compile</goal>
									<goal>compile-custom</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>uber</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<file>
					<exists>${basedir}/src/main/resources/META-INF/emily-uber.txt</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
						<executions>
							<execution>
								<goals>
									<goal>repackage</goal>
								</goals>
								<configuration>
									<executable>true</executable>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>wrapper</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<file>
					<exists>${basedir}/src/main/resources/META-INF/emily-wrapper.txt</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>appassembler-maven-plugin</artifactId>
						<configuration>
							<configurationDirectory>conf</configurationDirectory>
							<configurationSourceDirectory>src/main/resources</configurationSourceDirectory>
							<copyConfigurationDirectory>false</copyConfigurationDirectory>
							<includeConfigurationDirectoryInClasspath>true</includeConfigurationDirectoryInClasspath>
							<useWildcardClassPath>true</useWildcardClassPath>
							<useDaemonIdAsWrapperConfName>true</useDaemonIdAsWrapperConfName>
							<repositoryLayout>flat</repositoryLayout>
							<repositoryName>lib</repositoryName>
							<binFileExtensions>
								<windows>.bat</windows>
							</binFileExtensions>
							<logsDirectory>logs</logsDirectory>
							<daemons>
								<daemon>
									<id>${wrapper.daemon.id}</id>
									<platforms>
										<platform>jsw</platform>
									</platforms>
									<mainClass>${wrapper.main.class}</mainClass>
									<jvmSettings>
										<extraArguments>
											<!-- heap and gc -->
											<extraArgument>-Xms2g</extraArgument>
											<extraArgument>-Xmx8g</extraArgument>
											<extraArgument>-XX:ReservedCodeCacheSize=240m</extraArgument>
											<extraArgument>-XX:SoftRefLRUPolicyMSPerMB=50</extraArgument>
											<extraArgument>-ea</extraArgument>
											<extraArgument>-Dsun.io.useCanonCaches=false</extraArgument>
											<extraArgument>-Djava.net.preferIPv4Stack=true</extraArgument>
											<!-- jmx remote -->
											<!--
                                            <extraArgument>-Dcom.sun.management.jmxremote</extraArgument>
                                            <extraArgument>-Dcom.sun.management.jmxremote.ssl=false</extraArgument>
                                            <extraArgument>-Dcom.sun.management.jmxremote.authenticate=false</extraArgument>
                                            <extraArgument>-Dcom.sun.management.jmxremote.port=1098</extraArgument>
                                            -->
											<!-- remote debug -->
											<!--
                                            <extraArgument>-Xdebug</extraArgument>
                                            <extraArgument>-Xrunjdwp:transport=dt_socket,address=8001,server=y,suspend=y</extraArgument>
                                            -->
										</extraArguments>
									</jvmSettings>
									<generatorConfigurations>
										<generatorConfiguration>
											<generator>jsw</generator>
											<includes>
												<include>linux-x86-64</include>
												<include>windows-x86-64</include>
												<include>macosx-universal-64</include>
											</includes>
											<configuration>
												<property>
													<name>configuration.directory.in.classpath.first</name>
													<value>conf</value>
												</property>
												<property>
													<name>set.default.REPO_DIR</name>
													<value>lib</value>
												</property>
												<property>
													<name>wrapper.console.format</name>
													<value>M</value>
												</property>
												<property>
													<name>wrapper.logfile</name>
													<value>logs/${wrapper.daemon.id}.log</value>
												</property>
												<property>
													<name>wrapper.logfile.format</name>
													<value>M</value>
												</property>
												<property>
													<name>wrapper.logfile.maxsize</name>
													<value>10m</value>
												</property>
												<property>
													<name>wrapper.logfile.maxfiles</name>
													<value>5</value>
												</property>
											</configuration>
										</generatorConfiguration>
									</generatorConfigurations>
								</daemon>
							</daemons>
						</configuration>
						<executions>
							<execution>
								<id>build-deploy-dir</id>
								<phase>package</phase>
								<goals>
									<goal>generate-daemons</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${maven.assembly.plugin.version}</version>
						<configuration>
							<finalName>${wrapper.daemon.id}-${maven.build.timestamp}</finalName>
							<appendAssemblyId>false</appendAssemblyId>
							<tarLongFileMode>posix</tarLongFileMode>
							<descriptorRefs>
								<descriptorRef>wrapper-assembly</descriptorRef>
							</descriptorRefs>
						</configuration>
						<dependencies>
							<dependency>
								<groupId>com.alice.emily</groupId>
								<artifactId>emily-assets</artifactId>
								<version>${emily.version}</version>
							</dependency>
						</dependencies>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>banner</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<file>
					<exists>${basedir}/src/main/resources/META-INF/emily-banner.txt</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>ch.acanda.maven</groupId>
						<artifactId>spring-banner-plugin</artifactId>
						<executions>
							<execution>
								<id>generate-spring-banner</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>generate</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<text>${project.name}</text>
							<outputDirectory>${project.build.outputDirectory}</outputDirectory>
							<filename>banner.txt</filename>
							<includeInfo>true</includeInfo>
							<info>${application.title} : ${application.version}</info>
							<color>bright green</color>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>docker-compose</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<file>
					<exists>${basedir}/src/main/resources/META-INF/emily-docker-compose.marker</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<id>copy-explicit-dependencies</id>
								<phase>package</phase>
								<goals>
									<goal>copy-dependencies</goal>
								</goals>
								<configuration>
									<excludeGroupIds>com.alice.emily,org.springframework.boot</excludeGroupIds>
									<excludeScope>provided</excludeScope>
									<excludeTransitive>true</excludeTransitive>
									<overWriteIfNewer>true</overWriteIfNewer>
									<overWriteReleases>true</overWriteReleases>
									<overWriteSnapshots>true</overWriteSnapshots>
									<outputDirectory>${project.basedir}/target/docker/dependencies</outputDirectory>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${maven-assembly-plugin.version}</version>
						<dependencies>
							<dependency>
								<groupId>com.alice.emily</groupId>
								<artifactId>emily-assets</artifactId>
								<version>${emily.version}</version>
							</dependency>
						</dependencies>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<attach>false</attach>
									<finalName>${project.groupId}.${project.artifactId}-${maven.build.timestamp}</finalName>
									<appendAssemblyId>false</appendAssemblyId>
									<tarLongFileMode>posix</tarLongFileMode>
									<descriptorRefs>
										<descriptorRef>docker-compose-assembly</descriptorRef>
									</descriptorRefs>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
